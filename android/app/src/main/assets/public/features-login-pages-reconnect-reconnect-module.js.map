{"version":3,"sources":["./src/core/features/login/pages/reconnect/reconnect.html","./src/core/features/login/pages/reconnect/reconnect.module.ts","./src/core/features/login/pages/reconnect/reconnect.ts"],"names":[],"mappings":"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","file":"features-login-pages-reconnect-reconnect-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n\\n        <ion-title>\\n            <h1>{{ 'core.login.reconnect' | translate }}</h1>\\n        </ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content class=\\\"ion-padding\\\" (keydown)=\\\"keyDown($event)\\\" (keyup)=\\\"keyUp($event)\\\">\\n    <div class=\\\"list-item-limited-width\\\">\\n        <div class=\\\"ion-text-wrap ion-text-center ion-margin-bottom\\\" [ngClass]=\\\"{'item-avatar-center': showSiteAvatar}\\\">\\n            <!-- Show user avatar. -->\\n            <img *ngIf=\\\"showSiteAvatar\\\" [src]=\\\"userAvatar\\\" class=\\\"large-avatar\\\" core-external-content [siteId]=\\\"siteId\\\"\\n                alt=\\\"{{ 'core.pictureof' | translate:{$a: userFullName} }}\\\" onError=\\\"this.src='assets/img/user-avatar.png'\\\">\\n\\n            <div class=\\\"core-login-site-logo\\\" *ngIf=\\\"!showSiteAvatar\\\">\\n                <!-- Show site logo or a default image. -->\\n                <img *ngIf=\\\"logoUrl\\\" [src]=\\\"logoUrl\\\" role=\\\"presentation\\\" onError=\\\"this.src='assets/img/login_logo.png'\\\" alt=\\\"\\\">\\n                <img *ngIf=\\\"!logoUrl\\\" src=\\\"assets/img/login_logo.png\\\" role=\\\"presentation\\\" alt=\\\"\\\">\\n            </div>\\n\\n            <p *ngIf=\\\"siteName\\\" class=\\\"ion-padding core-sitename\\\">\\n                <core-format-text [text]=\\\"siteName\\\" [filter]=\\\"false\\\"></core-format-text>\\n            </p>\\n            <p class=\\\"core-siteurl\\\">{{siteUrl}}</p>\\n\\n            <ion-card *ngIf=\\\"!isLoggedOut\\\" class=\\\"core-danger-card core-login-reconnect-warning\\\">\\n                <ion-item>\\n                    <ion-icon name=\\\"fas-exclamation-circle\\\" slot=\\\"start\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                    <ion-label>\\n                        <p>{{ 'core.lostconnection' | translate }}</p>\\n                    </ion-label>\\n                </ion-item>\\n            </ion-card>\\n        </div>\\n        <form *ngIf=\\\"!isOAuth\\\" [formGroup]=\\\"credForm\\\" (ngSubmit)=\\\"login($event)\\\" class=\\\"core-login-form\\\" #reconnectForm>\\n            <ion-item class=\\\"ion-text-wrap core-username item-interactive\\\">\\n                <ion-label>\\n                    <p>{{username}}</p>\\n                </ion-label>\\n            </ion-item>\\n            <ion-item class=\\\"ion-margin-bottom\\\">\\n                <ion-label class=\\\"sr-only\\\">{{ 'core.login.password' | translate }}</ion-label>\\n                <core-show-password name=\\\"password\\\">\\n                    <ion-input class=\\\"core-ioninput-password\\\" name=\\\"password\\\" type=\\\"password\\\"\\n                        placeholder=\\\"{{ 'core.login.password' | translate }}\\\" formControlName=\\\"password\\\" [clearOnEdit]=\\\"false\\\"\\n                        autocomplete=\\\"current-password\\\" enterkeyhint=\\\"go\\\" required=\\\"true\\\">\\n                    </ion-input>\\n                </core-show-password>\\n            </ion-item>\\n            <div class=\\\"adaptable-buttons-row\\\">\\n                <ion-button expand=\\\"block\\\" fill=\\\"outline\\\" (click)=\\\"cancel($event)\\\" class=\\\"ion-margin ion-text-wrap\\\">\\n                    {{ 'core.login.cancel' | translate }}\\n                </ion-button>\\n                <ion-button type=\\\"submit\\\" expand=\\\"block\\\" [disabled]=\\\"!credForm.valid\\\"\\n                    class=\\\"ion-margin core-login-login-button ion-text-wrap\\\">\\n                    {{ 'core.login.loginbutton' | translate }}\\n                </ion-button>\\n            </div>\\n\\n            <ng-container *ngIf=\\\"showScanQR\\\">\\n                <div class=\\\"ion-text-center ion-padding\\\">{{ 'core.login.or' | translate }}</div>\\n                <ion-button expand=\\\"block\\\" fill=\\\"outline\\\" class=\\\"ion-margin\\\" (click)=\\\"showInstructionsAndScanQR()\\\">\\n                    <ion-icon slot=\\\"start\\\" name=\\\"fas-qrcode\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                    {{ 'core.scanqr' | translate }}\\n                </ion-button>\\n            </ng-container>\\n        </form>\\n\\n        <!-- Forgotten password option. -->\\n        <ion-button *ngIf=\\\"showForgottenPassword && !isOAuth\\\" expand=\\\"block\\\" fill=\\\"clear\\\"\\n            class=\\\"core-login-forgotten-password core-button-as-link ion-text-wrap\\\" (click)=\\\"forgottenPassword()\\\">\\n            {{ 'core.login.forgotten' | translate }}\\n        </ion-button>\\n\\n        <!-- Identity providers. -->\\n        <ion-list *ngIf=\\\"identityProviders && identityProviders.length\\\" class=\\\"ion-padding-top core-login-identity-providers\\\">\\n            <ion-item class=\\\"ion-text-wrap\\\">\\n                <ion-label>\\n                    <h3 class=\\\"item-heading\\\">{{ 'core.login.potentialidps' | translate }}</h3>\\n                </ion-label>\\n            </ion-item>\\n            <ion-button fill=\\\"outline\\\" *ngFor=\\\"let provider of identityProviders\\\" class=\\\"ion-text-wrap ion-margin core-oauth-provider\\\"\\n                (click)=\\\"oauthClicked(provider)\\\" [attr.aria-label]=\\\"provider.name\\\" expand=\\\"block\\\">\\n                <img [src]=\\\"provider.iconurl\\\" alt=\\\"\\\" width=\\\"32\\\" height=\\\"32\\\" slot=\\\"start\\\">\\n                <ion-label>{{provider.name}}</ion-label>\\n            </ion-button>\\n        </ion-list>\\n\\n        <!-- If OAuth, display cancel button since the form isn't displayed. -->\\n        <ion-list *ngIf=\\\"isOAuth\\\">\\n            <ion-button expand=\\\"block\\\" class=\\\"ion-margin\\\" fill=\\\"outline\\\" (click)=\\\"cancel($event)\\\">\\n                {{ 'core.login.cancel' | translate }}\\n            </ion-button>\\n        </ion-list>\\n    </div>\\n</ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { CoreLoginReconnectPage } from './reconnect';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: CoreLoginReconnectPage,\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n    ],\n    declarations: [\n        CoreLoginReconnectPage,\n    ],\n    exports: [RouterModule],\n})\nexport class CoreLoginReconnectPageModule {}\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { CoreApp } from '@services/app';\nimport { CoreNetwork } from '@services/network';\nimport { CoreSites, CoreSitesReadingStrategy } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreLoginHelper } from '@features/login/services/login-helper';\nimport { CoreSite, CoreSiteIdentityProvider, CoreSitePublicConfigResponse } from '@classes/site';\nimport { CoreEvents } from '@singletons/events';\nimport { CoreError } from '@classes/errors/error';\nimport { CoreNavigator, CoreRedirectPayload } from '@services/navigator';\nimport { CoreForms } from '@singletons/form';\n\n/**\n * Page to enter the user password to reconnect to a site.\n */\n@Component({\n    selector: 'page-core-login-reconnect',\n    templateUrl: 'reconnect.html',\n    styleUrls: ['../../login.scss'],\n})\nexport class CoreLoginReconnectPage implements OnInit, OnDestroy {\n\n    @ViewChild('reconnectForm') formElement?: ElementRef;\n\n    credForm: FormGroup;\n    siteUrl!: string;\n    username!: string;\n    userFullName!: string;\n    userAvatar?: string;\n    siteName!: string;\n    logoUrl?: string;\n    identityProviders?: CoreSiteIdentityProvider[];\n    showForgottenPassword = true;\n    showSiteAvatar = false;\n    isOAuth = false;\n    isLoggedOut: boolean;\n    siteId!: string;\n    showScanQR = false;\n\n    protected siteConfig?: CoreSitePublicConfigResponse;\n    protected viewLeft = false;\n    protected eventThrown = false;\n    protected redirectData?: CoreRedirectPayload;\n    protected loginSuccessful = false;\n\n    constructor(\n        protected fb: FormBuilder,\n    ) {\n        const currentSite = CoreSites.getCurrentSite();\n\n        this.isLoggedOut = !currentSite || currentSite.isLoggedOut();\n        this.credForm = fb.group({\n            password: ['', Validators.required],\n        });\n    }\n\n    /**\n     * Initialize the component.\n     */\n    async ngOnInit(): Promise<void> {\n        try {\n            this.siteId = CoreNavigator.getRequiredRouteParam<string>('siteId');\n\n            const redirectPath = CoreNavigator.getRouteParam('redirectPath');\n            const urlToOpen = CoreNavigator.getRouteParam('urlToOpen');\n            if (redirectPath || urlToOpen) {\n                this.redirectData = {\n                    redirectPath,\n                    redirectOptions: CoreNavigator.getRouteParam('redirectOptions'),\n                    urlToOpen,\n                };\n            }\n\n            const site = await CoreSites.getSite(this.siteId);\n\n            if (!site.infos) {\n                throw new CoreError('Invalid site');\n            }\n\n            this.username = site.infos.username;\n            this.userFullName = site.infos.fullname;\n            this.userAvatar = site.infos.userpictureurl;\n            this.siteUrl = site.infos.siteurl;\n            this.siteName = site.getSiteName();\n\n            // If login was OAuth we should only reach this page if the OAuth method ID has changed.\n            this.isOAuth = site.isOAuth();\n\n            // Show logo instead of avatar if it's a fixed site.\n            this.showSiteAvatar = !!this.userAvatar && !CoreLoginHelper.getFixedSites();\n\n            this.checkSiteConfig(site);\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n\n            return this.cancel();\n        }\n    }\n\n    /**\n     * Component destroyed.\n     */\n    ngOnDestroy(): void {\n        this.viewLeft = true;\n        CoreEvents.trigger(\n            CoreEvents.LOGIN_SITE_UNCHECKED,\n            {\n                config: this.siteConfig,\n                loginSuccessful: this.loginSuccessful,\n            },\n            this.siteId,\n        );\n    }\n\n    /**\n     * Get some data (like identity providers) from the site config.\n     */\n    protected async checkSiteConfig(site: CoreSite): Promise<void> {\n        this.siteConfig = await CoreUtils.ignoreErrors(site.getPublicConfig({\n            readingStrategy: CoreSitesReadingStrategy.PREFER_NETWORK,\n        }));\n\n        if (!this.siteConfig) {\n            return;\n        }\n\n        const disabledFeatures = CoreLoginHelper.getDisabledFeatures(this.siteConfig);\n\n        this.identityProviders = CoreLoginHelper.getValidIdentityProviders(this.siteConfig, disabledFeatures);\n        this.showForgottenPassword = !CoreLoginHelper.isForgottenPasswordDisabled(this.siteConfig);\n\n        if (!this.eventThrown && !this.viewLeft) {\n            this.eventThrown = true;\n            CoreEvents.trigger(CoreEvents.LOGIN_SITE_CHECKED, { config: this.siteConfig });\n        }\n\n        this.showScanQR = CoreLoginHelper.displayQRInSiteScreen() ||\n            CoreLoginHelper.displayQRInCredentialsScreen(this.siteConfig.tool_mobile_qrcodetype);\n\n        await CoreSites.checkApplication(this.siteConfig);\n\n        // Check logoURL if user avatar is not set.\n        if (this.userAvatar?.startsWith(this.siteUrl + '/theme/image.php')) {\n            this.showSiteAvatar = false;\n        }\n        this.logoUrl = CoreLoginHelper.getLogoUrl(this.siteConfig);\n    }\n\n    /**\n     * Cancel reconnect.\n     *\n     * @param e Event.\n     */\n    cancel(e?: Event): void {\n        if (e) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n\n        if (this.isLoggedOut) {\n            // Go to sites page when user is logged out.\n            CoreNavigator.navigate('/login/sites', { reset: true });\n        }\n\n        CoreSites.logout();\n    }\n\n    /**\n     * Tries to authenticate the user.\n     *\n     * @param e Event.\n     */\n    async login(e: Event): Promise<void> {\n        e.preventDefault();\n        e.stopPropagation();\n\n        CoreApp.closeKeyboard();\n\n        // Get input data.\n        const password = this.credForm.value.password;\n\n        if (!password) {\n            CoreDomUtils.showErrorModal('core.login.passwordrequired', true);\n\n            return;\n        }\n\n        if (!CoreNetwork.isOnline()) {\n            CoreDomUtils.showErrorModal('core.networkerrormsg', true);\n\n            return;\n        }\n\n        const modal = await CoreDomUtils.showModalLoading();\n\n        try {\n            // Start the authentication process.\n            const data = await CoreSites.getUserToken(this.siteUrl, this.username, password);\n\n            await CoreSites.updateSiteToken(this.siteUrl, this.username, data.token, data.privateToken);\n\n            CoreForms.triggerFormSubmittedEvent(this.formElement, true);\n\n            // Update site info too.\n            await CoreSites.updateSiteInfoByUrl(this.siteUrl, this.username);\n\n            // Reset fields so the data is not in the view anymore.\n            this.credForm.controls['password'].reset();\n\n            // Go to the site initial page.\n            this.loginSuccessful = true;\n\n            await CoreNavigator.navigateToSiteHome({\n                params: this.redirectData,\n            });\n        } catch (error) {\n            CoreLoginHelper.treatUserTokenError(this.siteUrl, error, this.username, password);\n\n            if (error.loggedout) {\n                this.cancel();\n            } else if (error.errorcode == 'forcepasswordchangenotice') {\n                // Reset password field.\n                this.credForm.controls.password.reset();\n            }\n        } finally {\n            modal.dismiss();\n        }\n    }\n\n    /**\n     * Forgotten password button clicked.\n     */\n    forgottenPassword(): void {\n        CoreLoginHelper.forgottenPasswordClicked(this.siteUrl, this.username, this.siteConfig);\n    }\n\n    /**\n     * An OAuth button was clicked.\n     *\n     * @param provider The provider that was clicked.\n     */\n    oauthClicked(provider: CoreSiteIdentityProvider): void {\n        const result = CoreLoginHelper.openBrowserForOAuthLogin(\n            this.siteUrl,\n            provider,\n            this.siteConfig?.launchurl,\n            this.redirectData,\n        );\n\n        if (!result) {\n            CoreDomUtils.showErrorModal('Invalid data.');\n        }\n    }\n\n    /**\n     * Show instructions and scan QR code.\n     *\n     * @return Promise resolved when done.\n     */\n    async showInstructionsAndScanQR(): Promise<void> {\n        try {\n            await CoreLoginHelper.showScanQRInstructions();\n\n            await CoreLoginHelper.scanQR();\n        } catch {\n            // Ignore errors.\n        }\n    }\n\n    /**\n     * A11y key functionality that prevents keyDown events.\n     *\n     * @param e Event.\n     */\n    keyDown(e: KeyboardEvent): void {\n        if (e.key == 'Escape') {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    }\n\n    /**\n     * Cancel reconnect.\n     *\n     * @param e Event.\n     */\n    keyUp(e: KeyboardEvent): void {\n        if (e.key == 'Escape') {\n            this.cancel(e);\n        }\n    }\n\n}\n"],"sourceRoot":"webpack:///"}