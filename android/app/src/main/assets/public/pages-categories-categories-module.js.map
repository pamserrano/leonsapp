{"version":3,"sources":["./src/core/features/courses/pages/categories/categories.html","./src/core/features/courses/pages/categories/categories.module.ts","./src/core/features/courses/pages/categories/categories.ts"],"names":[],"mappings":"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","file":"pages-categories-categories-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <ion-title>\\n            <h1>\\n                <core-format-text [text]=\\\"title\\\" contextLevel=\\\"coursecat\\\" [contextInstanceId]=\\\"currentCategory && currentCategory!.id\\\">\\n                </core-format-text>\\n            </h1>\\n        </ion-title>\\n        <ion-buttons slot=\\\"end\\\">\\n            <core-context-menu>\\n                <core-context-menu-item *ngIf=\\\"downloadCourseEnabled || downloadCoursesEnabled\\\" [priority]=\\\"1000\\\"\\n                    [content]=\\\"'core.settings.showdownloadoptions' | translate\\\" (action)=\\\"toggleDownload()\\\" iconAction=\\\"toggle\\\"\\n                    [(toggle)]=\\\"downloadEnabled\\\"></core-context-menu-item>\\n                <core-context-menu-item [priority]=\\\"900\\\" [content]=\\\"'core.courses.showonlyenrolled' | translate\\\" (action)=\\\"filterEnrolled()\\\"\\n                    iconAction=\\\"toggle\\\" [(toggle)]=\\\"showOnlyEnrolled\\\"></core-context-menu-item>\\n            </core-context-menu>\\n        </ion-buttons>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content>\\n    <ion-refresher slot=\\\"fixed\\\" [disabled]=\\\"!categoriesLoaded\\\" (ionRefresh)=\\\"refreshCategories($event.target)\\\">\\n        <ion-refresher-content pullingText=\\\"{{ 'core.pulltorefresh' | translate }}\\\"></ion-refresher-content>\\n    </ion-refresher>\\n    <core-loading [hideUntil]=\\\"categoriesLoaded\\\">\\n        <ion-list class=\\\"list-item-limited-width\\\">\\n            <ion-item *ngIf=\\\"currentCategory\\\" class=\\\"ion-text-wrap\\\">\\n                <ion-icon name=\\\"fas-folder\\\" slot=\\\"start\\\" [attr.aria-label]=\\\"'core.category' | translate\\\"></ion-icon>\\n                <ion-label>\\n                    <p class=\\\"item-heading\\\">\\n                        <core-format-text [text]=\\\"currentCategory.name\\\" contextLevel=\\\"coursecat\\\" [contextInstanceId]=\\\"currentCategory.id\\\">\\n                        </core-format-text>\\n                    </p>\\n                    <p *ngIf=\\\"currentCategory.description\\\">\\n                        <core-format-text [text]=\\\"currentCategory.description\\\" collapsible-item contextLevel=\\\"coursecat\\\"\\n                            [contextInstanceId]=\\\"currentCategory.id\\\"></core-format-text>\\n                    </p>\\n                </ion-label>\\n            </ion-item>\\n\\n            <ng-container *ngIf=\\\"categories.length > 0\\\">\\n                <ion-item-divider>\\n                    <ion-label>\\n                        <h2 class=\\\"big\\\">{{ 'core.courses.categories' | translate }}</h2>\\n                    </ion-label>\\n                </ion-item-divider>\\n                <ion-card *ngFor=\\\"let category of categories\\\">\\n                    <ion-item button class=\\\"ion-text-wrap\\\" (click)=\\\"openCategory(category.id)\\\" [attr.aria-label]=\\\"category.name\\\"\\n                        detail=\\\"true\\\">\\n                        <ion-icon name=\\\"fas-folder\\\" slot=\\\"start\\\" [attr.aria-label]=\\\"'core.category' | translate\\\"></ion-icon>\\n                        <ion-label>\\n                            <h2>\\n                                <core-format-text [text]=\\\"category.name\\\" contextLevel=\\\"coursecat\\\" [contextInstanceId]=\\\"category.id\\\">\\n                                </core-format-text>\\n                            </h2>\\n                        </ion-label>\\n                        <ion-badge slot=\\\"end\\\" *ngIf=\\\"!showOnlyEnrolled && category.coursecount > 0\\\" color=\\\"light\\\">\\n                            <span aria-hidden=\\\"true\\\">{{ category.coursecount }}</span>\\n                            <span class=\\\"sr-only\\\">{{ 'core.courses.therearecourses' | translate:{ $a: category.coursecount } }}</span>\\n                        </ion-badge>\\n                    </ion-item>\\n                </ion-card>\\n            </ng-container>\\n\\n            <ng-container *ngIf=\\\"courses.length > 0\\\">\\n                <ion-item-divider>\\n                    <ion-label>\\n                        <h2 *ngIf=\\\"!showOnlyEnrolled\\\" class=\\\"big\\\">{{ 'core.courses.courses' | translate }}</h2>\\n                        <h2 *ngIf=\\\"showOnlyEnrolled\\\" class=\\\"big\\\">{{ 'core.courses.mycourses' | translate }}</h2>\\n                    </ion-label>\\n                </ion-item-divider>\\n                <core-courses-course-list-item *ngFor=\\\"let course of courses\\\" [course]=\\\"course\\\" [showDownload]=\\\"downloadEnabled\\\">\\n                </core-courses-course-list-item>\\n            </ng-container>\\n        </ion-list>\\n        <core-empty-box *ngIf=\\\"!categories.length && !courses.length\\\" icon=\\\"fas-graduation-cap\\\"\\n            [message]=\\\"'core.courses.nocoursesyet' | translate\\\">\\n        </core-empty-box>\\n    </core-loading>\\n</ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { CoreCoursesComponentsModule } from '../../components/components.module';\n\nimport { CoreCoursesCategoriesPage } from './categories';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: CoreCoursesCategoriesPage,\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n        CoreCoursesComponentsModule,\n    ],\n    declarations: [\n        CoreCoursesCategoriesPage,\n    ],\n    exports: [RouterModule],\n})\nexport class CoreCoursesCategoriesPageModule { }\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { IonRefresher } from '@ionic/angular';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\nimport { CoreUtils } from '@services/utils/utils';\nimport { CoreCategoryData, CoreCourseListItem, CoreCourses, CoreCoursesProvider } from '../../services/courses';\nimport { Translate } from '@singletons';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreEventObserver, CoreEvents } from '@singletons/events';\n\n/**\n * Page that displays a list of categories and the courses in the current category if any.\n */\n@Component({\n    selector: 'page-core-courses-categories',\n    templateUrl: 'categories.html',\n})\nexport class CoreCoursesCategoriesPage implements OnInit, OnDestroy {\n\n    title: string;\n    currentCategory?: CoreCategoryData;\n    categories: CoreCategoryData[] = [];\n    courses: CoreCourseListItem[] = [];\n    categoriesLoaded = false;\n\n    showOnlyEnrolled = false;\n\n    downloadEnabled = false;\n    downloadCourseEnabled = false;\n    downloadCoursesEnabled = false;\n\n    protected categoryCourses: CoreCourseListItem[] = [];\n    protected currentSiteId: string;\n    protected categoryId = 0;\n    protected myCoursesObserver: CoreEventObserver;\n    protected siteUpdatedObserver: CoreEventObserver;\n    protected downloadEnabledObserver: CoreEventObserver;\n    protected isDestroyed = false;\n\n    constructor() {\n        this.title = Translate.instant('core.courses.categories');\n        this.currentSiteId = CoreSites.getRequiredCurrentSite().getId();\n\n        // Update list if user enrols in a course.\n        this.myCoursesObserver = CoreEvents.on(\n            CoreCoursesProvider.EVENT_MY_COURSES_UPDATED,\n            (data) => {\n                if (data.action == CoreCoursesProvider.ACTION_ENROL) {\n                    this.fetchCategories();\n                }\n            },\n\n            this.currentSiteId,\n        );\n\n        // Refresh the enabled flags if site is updated.\n        this.siteUpdatedObserver = CoreEvents.on(CoreEvents.SITE_UPDATED, () => {\n            this.downloadCourseEnabled = !CoreCourses.isDownloadCourseDisabledInSite();\n            this.downloadCoursesEnabled = !CoreCourses.isDownloadCoursesDisabledInSite();\n\n            this.downloadEnabled = (this.downloadCourseEnabled || this.downloadCoursesEnabled) && this.downloadEnabled;\n        }, this.currentSiteId);\n\n        this.downloadEnabledObserver = CoreEvents.on(CoreCoursesProvider.EVENT_DASHBOARD_DOWNLOAD_ENABLED_CHANGED, (data) => {\n            this.downloadEnabled = (this.downloadCourseEnabled || this.downloadCoursesEnabled) && data.enabled;\n        });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnInit(): void {\n        this.categoryId = CoreNavigator.getRouteNumberParam('id') || 0;\n        this.showOnlyEnrolled = CoreNavigator.getRouteBooleanParam('enrolled') || this.showOnlyEnrolled;\n\n        this.downloadCourseEnabled = !CoreCourses.isDownloadCourseDisabledInSite();\n        this.downloadCoursesEnabled = !CoreCourses.isDownloadCoursesDisabledInSite();\n\n        this.downloadEnabled =\n            (this.downloadCourseEnabled || this.downloadCoursesEnabled) && CoreCourses.getCourseDownloadOptionsEnabled();\n\n        this.fetchCategories().finally(() => {\n            this.categoriesLoaded = true;\n        });\n    }\n\n    /**\n     * Fetch the categories.\n     *\n     * @return Promise resolved when done.\n     */\n    protected async fetchCategories(): Promise<void> {\n        try {\n            const categories: CoreCategoryData[] = await CoreCourses.getCategories(this.categoryId, true);\n\n            this.currentCategory = undefined;\n\n            const index = categories.findIndex((category) => category.id == this.categoryId);\n\n            if (index >= 0) {\n                this.currentCategory = categories[index];\n                // Delete current Category to avoid problems with the formatTree.\n                delete categories[index];\n            }\n\n            // Sort by depth and sortorder to avoid problems formatting Tree.\n            categories.sort((a, b) => {\n                if (a.depth == b.depth) {\n                    return (a.sortorder > b.sortorder) ? 1 : ((b.sortorder > a.sortorder) ? -1 : 0);\n                }\n\n                return a.depth > b.depth ? 1 : -1;\n            });\n\n            this.categories = CoreUtils.formatTree(categories, 'parent', 'id', this.categoryId);\n\n            if (this.currentCategory) {\n                this.title = this.currentCategory.name;\n\n                try {\n                    this.categoryCourses = await CoreCourses.getCoursesByField('category', this.categoryId);\n                    await this.filterEnrolled();\n                } catch (error) {\n                    !this.isDestroyed && CoreDomUtils.showErrorModalDefault(error, 'core.courses.errorloadcourses', true);\n                }\n            }\n        } catch (error) {\n            !this.isDestroyed && CoreDomUtils.showErrorModalDefault(error, 'core.courses.errorloadcategories', true);\n        }\n    }\n\n    /**\n     * Refresh the categories.\n     *\n     * @param refresher Refresher.\n     */\n    refreshCategories(refresher?: IonRefresher): void {\n        const promises: Promise<void>[] = [];\n\n        promises.push(CoreCourses.invalidateUserCourses());\n        promises.push(CoreCourses.invalidateCategories(this.categoryId, true));\n        promises.push(CoreCourses.invalidateCoursesByField('category', this.categoryId));\n        promises.push(CoreSites.getRequiredCurrentSite().invalidateConfig());\n\n        Promise.all(promises).finally(() => {\n            this.fetchCategories().finally(() => {\n                refresher?.complete();\n            });\n        });\n    }\n\n    /**\n     * Open a category.\n     *\n     * @param categoryId Category Id.\n     */\n    openCategory(categoryId: number): void {\n        CoreNavigator.navigateToSitePath(\n            'courses/categories/' + categoryId,\n            { params: {\n                enrolled: this.showOnlyEnrolled,\n            } },\n        );\n    }\n\n    /**\n     * Filter my courses or not.\n     */\n    async filterEnrolled(): Promise<void> {\n        if (!this.showOnlyEnrolled) {\n            this.courses = this.categoryCourses;\n        } else {\n            await Promise.all(this.categoryCourses.map(async (course) => {\n                const isEnrolled = course.progress !== undefined;\n\n                if (!isEnrolled) {\n                    try {\n                        const userCourse = await CoreCourses.getUserCourse(course.id);\n                        course.progress = userCourse.progress;\n                        course.completionusertracked = userCourse.completionusertracked;\n                    } catch {\n                        // Ignore errors.\n                    }\n                }\n            }));\n            this.courses = this.categoryCourses.filter((course) => 'progress' in course);\n        }\n    }\n\n    /**\n     * Toggle download enabled.\n     */\n    toggleDownload(): void {\n        CoreCourses.setCourseDownloadOptionsEnabled(this.downloadEnabled);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.myCoursesObserver.off();\n        this.siteUpdatedObserver.off();\n        this.downloadEnabledObserver.off();\n        this.isDestroyed = true;\n    }\n\n}\n"],"sourceRoot":"webpack:///"}