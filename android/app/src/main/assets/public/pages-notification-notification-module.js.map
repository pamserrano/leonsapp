{"version":3,"sources":["./src/addons/notifications/pages/notification/notification.html","./src/addons/notifications/pages/notification/notification.module.ts","./src/addons/notifications/pages/notification/notification.scss","./src/addons/notifications/pages/notification/notification.ts","./src/core/classes/items-management/swipe-navigation-items-manager.ts"],"names":[],"mappings":"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","file":"pages-notification-notification-module.js","sourcesContent":["export default \"<ion-header>\\n    <ion-toolbar>\\n        <ion-buttons slot=\\\"start\\\">\\n            <ion-back-button [text]=\\\"'core.back' | translate\\\"></ion-back-button>\\n        </ion-buttons>\\n        <ion-title>\\n            <h1>{{ 'addon.notifications.notifications' | translate }}</h1>\\n        </ion-title>\\n    </ion-toolbar>\\n</ion-header>\\n<ion-content [core-swipe-navigation]=\\\"notifications\\\">\\n    <core-loading [hideUntil]=\\\"loaded\\\">\\n        <div class=\\\"list-item-limited-width\\\">\\n\\n            <ion-item class=\\\"ion-text-wrap core-notification-title\\\" lines=\\\"full\\\">\\n                <core-user-avatar *ngIf=\\\"userIdFrom > 0\\\" slot=\\\"start\\\" [userId]=\\\"userIdFrom\\\" [profileUrl]=\\\"profileImageUrlFrom\\\"\\n                    [fullname]=\\\"userFromFullName\\\">\\n                    <div class=\\\"core-avatar-extra-img\\\" *ngIf=\\\"iconUrl && !modname\\\">\\n                        <img [src]=\\\"iconUrl\\\" alt=\\\"\\\" role=\\\"presentation\\\">\\n                    </div>\\n                    <core-mod-icon *ngIf=\\\"modname\\\" [modicon]=\\\"iconUrl\\\" [modname]=\\\"modname\\\" [showAlt]=\\\"false\\\">\\n                    </core-mod-icon>\\n                </core-user-avatar>\\n\\n                <ng-container *ngIf=\\\"userIdFrom <= 0 && iconUrl\\\">\\n                    <div class=\\\"core-notification-icon\\\" *ngIf=\\\"!modname\\\" slot=\\\"start\\\">\\n                        <img [src]=\\\"iconUrl\\\" alt=\\\"\\\" role=\\\"presentation\\\">\\n                    </div>\\n                    <core-mod-icon *ngIf=\\\"modname\\\" [modicon]=\\\"iconUrl\\\" [modname]=\\\"modname\\\" [showAlt]=\\\"false\\\" class=\\\"core-notification-icon\\\"\\n                        slot=\\\"start\\\">\\n                    </core-mod-icon>\\n                </ng-container>\\n\\n                <ion-label>\\n                    <p class=\\\"item-heading\\\">\\n                        <core-format-text [text]=\\\"subject\\\" contextLevel=\\\"system\\\" [contextInstanceId]=\\\"0\\\" [wsNotFiltered]=\\\"true\\\">\\n                        </core-format-text>\\n                    </p>\\n                    <p>{{ timecreated | coreTimeAgo }}<ng-container *ngIf=\\\"userIdFrom > 0\\\"> · {{\\n                            userFromFullName }}</ng-container>\\n                    </p>\\n                </ion-label>\\n            </ion-item>\\n            <ion-item class=\\\"ion-text-wrap core-notification-body\\\">\\n                <ion-label>\\n                    <core-format-text [text]=\\\"content | coreCreateLinks\\\" contextLevel=\\\"system\\\" [contextInstanceId]=\\\"0\\\">\\n                    </core-format-text>\\n                </ion-label>\\n            </ion-item>\\n        </div>\\n\\n        <div collapsible-footer appearOnBottom *ngIf=\\\"loaded && actions && actions.length > 0\\\" slot=\\\"fixed\\\">\\n            <div class=\\\"list-item-limited-width adaptable-buttons-row\\\">\\n                <ion-button expand=\\\"block\\\" (click)=\\\"action.action()\\\" *ngFor=\\\"let action of actions\\\">\\n                    <ion-icon slot=\\\"start\\\" name=\\\"{{action.icon}}\\\" aria-hidden=\\\"true\\\"></ion-icon>\\n                    {{ action.message | translate }}\\n                </ion-button>\\n            </div>\\n        </div>\\n    </core-loading>\\n</ion-content>\\n\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { CoreSharedModule } from '@/core/shared.module';\nimport { AddonNotificationsNotificationPage } from './notification';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AddonNotificationsNotificationPage,\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        CoreSharedModule,\n    ],\n    declarations: [\n        AddonNotificationsNotificationPage,\n    ],\n    exports: [RouterModule],\n})\nexport class AddonNotificationsNotificationPageModule {}\n","export default \"/**\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here the different files you should import to use global variables.\\n */\\n/**\\n * Imported ionic string functions for SCSS\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.functions.string.scss\\n */\\n/**\\n * Imported ionic color functions for SCSS\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.functions.color.scss\\n */\\n/**\\n * Imported ionic mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/themes/ionic.mixins.scss\\n */\\n/**\\n * Imported ionic mixins for SCSS from different components\\n * ----------------------------------------------------------------------------\\n * Extracted from\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/components/grid/grid.mixins.scss\\n * https://github.com/ionic-team/ionic-framework/blob/master/core/src/components/item/item.mixins.scss\\n */\\n/**\\n * App custom mixins for SCSS\\n * ----------------------------------------------------------------------------\\n * Place here our custom mixins.\\n */\\n/**\\n * Same as item-push-svg-url but admits flip-rtl\\n */\\n/*\\n * App Custom App variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all custom app variables.\\n */\\n/*\\n * App Global variables SCSS\\n * ----------------------------------------------------------------------------\\n * Place here all global variables.\\n */\\n/**\\n * Layout Breakpoints\\n *\\n * https://ionicframework.com/docs/layout/grid#default-breakpoints\\n */\\n:host .core-notification-title [slot=start] {\\n  align-self: start;\\n  margin-top: 16px;\\n}\\n:host .core-notification-title p.item-heading {\\n  font-size: 16px;\\n}\\n:host .core-notification-title p {\\n  font-size: 12px;\\n}\\n:host .core-notification-body core-format-text {\\n  font-size: var(--text-size);\\n}\\n:host .core-notification-body h2 {\\n  font-weight: bold;\\n}\\n:host .core-notification-body core-format-text ::ng-deep .forumpost {\\n  border: 1px solid var(--gray-200);\\n  width: 100%;\\n  margin: 0 0 1em 0;\\n}\\n:host .core-notification-body core-format-text ::ng-deep .forumpost td {\\n  padding: 10px;\\n}\\n:host .core-notification-body core-format-text ::ng-deep .forumpost .header {\\n  background-color: var(--light);\\n}\\n:host .core-notification-body core-format-text ::ng-deep .forumpost .header .picture {\\n  width: 48px;\\n  text-align: center;\\n  padding-left: 4px;\\n  padding-right: 0px;\\n  padding-top: 8px;\\n}\\n@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0) {\\n  :host .core-notification-body core-format-text ::ng-deep .forumpost .header .picture {\\n    padding-left: unset;\\n    padding-right: unset;\\n    -webkit-padding-start: 4px;\\n    padding-inline-start: 4px;\\n    -webkit-padding-end: 0px;\\n    padding-inline-end: 0px;\\n  }\\n}\\n:host .core-notification-body core-format-text ::ng-deep .forumpost .header .picture img {\\n  width: 44px !important;\\n}\\n:host .core-notification-body core-format-text ::ng-deep .forumpost .subject {\\n  font-weight: 700;\\n  margin-bottom: 1rem;\\n}\\n:host .core-notification-body core-format-text ::ng-deep a {\\n  text-decoration: none;\\n}\\n:host .core-notification-body core-format-text ::ng-deep .userpicture {\\n  border-radius: 50%;\\n}\\n:host .core-notification-body core-format-text ::ng-deep .mdl-right {\\n  text-align: end;\\n}\\n:host .core-notification-body core-format-text ::ng-deep .mdl-right a {\\n  display: none;\\n}\\n:host .core-notification-body core-format-text ::ng-deep .mdl-right font {\\n  font-size: 0.9em;\\n}\\n:host .core-notification-body core-format-text ::ng-deep .commands {\\n  display: none;\\n}\\n:host .core-notification-body core-format-text ::ng-deep hr {\\n  margin-top: 1.5rem;\\n  margin-bottom: 1.5rem;\\n  background-color: var(--gray-200);\\n}\\n/*# sourceMappingURL=data:application/json;base64, */\";","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { AddonLegacyNotificationsNotificationsSource } from '@addons/notifications/classes/legacy-notifications-source';\nimport { AddonNotificationsNotificationsSource } from '@addons/notifications/classes/notifications-source';\nimport { AddonNotificationsNotificationData } from '@addons/notifications/services/handlers/push-click';\nimport {\n    AddonNotificationsHelper,\n    AddonNotificationsNotificationToRender,\n} from '@addons/notifications/services/notifications-helper';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRouteSnapshot } from '@angular/router';\nimport { CoreRoutedItemsManagerSourcesTracker } from '@classes/items-management/routed-items-manager-sources-tracker';\nimport { CoreSwipeNavigationItemsManager } from '@classes/items-management/swipe-navigation-items-manager';\nimport { CoreContentLinksAction, CoreContentLinksDelegate } from '@features/contentlinks/services/contentlinks-delegate';\nimport { CoreNavigator } from '@services/navigator';\nimport { CoreSites } from '@services/sites';\nimport { CoreDomUtils } from '@services/utils/dom';\n\n/**\n * Page to render a notification.\n */\n@Component({\n    selector: 'page-addon-notifications-notification',\n    templateUrl: 'notification.html',\n    styleUrls: ['../../notifications.scss', 'notification.scss'],\n})\nexport class AddonNotificationsNotificationPage implements OnInit, OnDestroy {\n\n    notifications?: AddonNotificationSwipeItemsManager;\n    subject = ''; // Notification subject.\n    content = ''; // Notification content.\n    userIdFrom = -1; // User ID who sent the notification.\n    profileImageUrlFrom?: string; // Avatar of the user who sent the notification.\n    userFromFullName?: string; // Name of the user who sent the notification.\n    iconUrl?: string; // Icon URL.\n    modname?: string; // Module name.\n    loaded = false;\n    timecreated = 0;\n\n    // Actions data.\n    actions: CoreContentLinksAction[] = [];\n    contextUrl?: string;\n    courseId?: number;\n    actionsData?: Record<string, unknown>; // Extra data to handle the URL.\n\n    /**\n     * @inheritdoc\n     */\n    async ngOnInit(): Promise<void> {\n        let notification: AddonNotificationsNotification;\n\n        try {\n            notification = this.getNotification();\n        } catch (error) {\n            CoreDomUtils.showErrorModal(error);\n            CoreNavigator.back();\n\n            return;\n        }\n\n        if ('subject' in notification) {\n            this.subject = notification.subject;\n            this.content = notification.mobiletext || notification.fullmessagehtml;\n            this.userIdFrom = notification.useridfrom;\n            this.profileImageUrlFrom = notification.profileimageurlfrom;\n            this.userFromFullName = notification.userfromfullname;\n            this.iconUrl = notification.iconurl;\n            if (notification.moodlecomponent?.startsWith('mod_') && notification.iconurl) {\n                const modname = notification.moodlecomponent.substring(4);\n                if (notification.iconurl.match('/theme/image.php/[^/]+/' + modname + '/[-0-9]*/') ||\n                        notification.iconurl.match('/theme/image.php/[^/]+/' + notification.moodlecomponent + '/[-0-9]*/')) {\n                    this.modname = modname;\n                }\n            }\n            this.timecreated = notification.timecreated;\n        } else {\n            this.subject = notification.title || '';\n            this.content = notification.message || '';\n            this.userIdFrom = notification.userfromid ? Number(notification.userfromid) : -1;\n            this.profileImageUrlFrom = notification.senderImage;\n            this.userFromFullName = notification.userfromfullname;\n        }\n\n        await this.loadActions(notification);\n        AddonNotificationsHelper.markNotificationAsRead(notification);\n\n        this.loaded = true;\n    }\n\n    /**\n     * Get notification.\n     *\n     * @returns notification.\n     */\n    getNotification(): AddonNotificationsNotification {\n        const id = CoreNavigator.getRouteNumberParam('id');\n        const notification = id ? this.getNotificationById(id) : undefined;\n\n        return notification ?? CoreNavigator.getRequiredRouteParam('notification');\n    }\n\n    /**\n     * Obtain notification by passed id.\n     *\n     * @param notificationId Notification id.\n     * @return Found notification.\n     */\n    getNotificationById(notificationId: number): AddonNotificationsNotification | undefined {\n        const source = CoreRoutedItemsManagerSourcesTracker.getOrCreateSource(\n            CoreSites.getRequiredCurrentSite().isVersionGreaterEqualThan('4.0')\n                ? AddonNotificationsNotificationsSource\n                : AddonLegacyNotificationsNotificationsSource,\n            [],\n        );\n        const notification = source.getItems()?.find(({ id }) => id === notificationId);\n\n        if (!notification) {\n            return;\n        }\n\n        this.loadNotifications(source);\n\n        return notification;\n    }\n\n    /**\n     * Load notifications from source.\n     *\n     * @param source Notifications source\n     */\n    async loadNotifications(source: AddonNotificationsNotificationsSource): Promise<void> {\n        this.notifications = new AddonNotificationSwipeItemsManager(source);\n\n        await this.notifications.start();\n    }\n\n    /**\n     * Load notification actions\n     *\n     * @param notification Notification.\n     * @return Promise resolved when done.\n     */\n    async loadActions(notification: AddonNotificationsNotification): Promise<void> {\n        if (!notification.contexturl && (!notification.customdata || !notification.customdata.appurl)) {\n            // No URL, nothing to do.\n            return;\n        }\n\n        let actions: CoreContentLinksAction[] = [];\n        this.actionsData = notification.customdata;\n        this.contextUrl = notification.contexturl;\n        this.courseId = 'courseid' in notification ? notification.courseid : undefined;\n\n        // Treat appurl first if any.\n        if (this.actionsData?.appurl) {\n            actions = await CoreContentLinksDelegate.getActionsFor(\n                <string> this.actionsData.appurl,\n                this.courseId,\n                undefined,\n                this.actionsData,\n            );\n        }\n\n        if (!actions.length && this.contextUrl) {\n            // No appurl or cannot handle it. Try with contextUrl.\n            actions = await CoreContentLinksDelegate.getActionsFor(this.contextUrl, this.courseId, undefined, this.actionsData);\n        }\n\n        if (!actions.length) {\n            // URL is not supported. Add an action to open it in browser.\n            actions.push({\n                message: 'core.view',\n                icon: 'fas-eye',\n                action: this.openInBrowser.bind(this),\n            });\n        }\n\n        this.actions = actions;\n    }\n\n    /**\n     * Default action. Open in browser.\n     *\n     * @param siteId Site ID to use.\n     */\n    protected async openInBrowser(siteId?: string): Promise<void> {\n        const url = <string> this.actionsData?.appurl || this.contextUrl;\n\n        if (!url) {\n            return;\n        }\n\n        const site = await CoreSites.getSite(siteId);\n\n        site.openInBrowserWithAutoLogin(url);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    ngOnDestroy(): void {\n        this.notifications?.destroy();\n    }\n\n}\n\n/**\n * Helper to manage swiping within a collection of notifications.\n */\nclass AddonNotificationSwipeItemsManager extends CoreSwipeNavigationItemsManager {\n\n    /**\n     * @inheritdoc\n     */\n    protected getSelectedItemPathFromRoute(route: ActivatedRouteSnapshot): string | null {\n        return route.params.id;\n    }\n\n}\n\ntype AddonNotificationsNotification = AddonNotificationsNotificationToRender | AddonNotificationsNotificationData;\n","// (C) Copyright 2015 Moodle Pty Ltd.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport { ActivatedRoute, ActivatedRouteSnapshot, UrlSegment } from '@angular/router';\n\nimport { CoreNavigator } from '@services/navigator';\n\nimport { CoreRoutedItemsManager } from './routed-items-manager';\nimport { CoreRoutedItemsManagerSource } from './routed-items-manager-source';\n\n/**\n * Helper class to manage the state and routing of a swipeable page.\n */\nexport class CoreSwipeNavigationItemsManager<\n    Item = unknown,\n    Source extends CoreRoutedItemsManagerSource<Item> = CoreRoutedItemsManagerSource<Item>\n>\n    extends CoreRoutedItemsManager<Item, Source> {\n\n    /**\n     * Process page started operations.\n     */\n    async start(): Promise<void> {\n        this.updateSelectedItem();\n    }\n\n    /**\n     * Navigate to the next item.\n     */\n    async navigateToNextItem(): Promise<void> {\n        await this.navigateToItemBy(1, 'forward');\n    }\n\n    /**\n     * Navigate to the previous item.\n     */\n    async navigateToPreviousItem(): Promise<void> {\n        await this.navigateToItemBy(-1, 'back');\n    }\n\n    /**\n     * Has a next item.\n     */\n    async hasNextItem(): Promise<boolean> {\n        const item = await this.getItemBy(1);\n\n        return !!item;\n    }\n\n    /**\n     * Has a previous item.\n     */\n    async hasPreviousItem(): Promise<boolean> {\n        const item = await this.getItemBy(-1);\n\n        return !!item;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getCurrentPageRoute(): ActivatedRoute | null {\n        return CoreNavigator.getCurrentRoute();\n    }\n\n    /**\n     * @inheritdoc\n     */\n    protected getSelectedItemPathFromRoute(route: ActivatedRouteSnapshot): string | null {\n        const segments: UrlSegment[] = [];\n\n        while (route) {\n            segments.push(...route.url);\n\n            if (!route.firstChild) {\n                break;\n            }\n\n            route = route.firstChild;\n        }\n\n        return segments.map(segment => segment.path).join('/').replace(/\\/+/, '/').trim() || null;\n    }\n\n    /**\n     * Navigate to an item by an offset.\n     *\n     * @param delta Index offset.\n     * @param animationDirection Animation direction.\n     */\n    protected async navigateToItemBy(delta: number, animationDirection: 'forward' | 'back'): Promise<void> {\n        const item = await this.getItemBy(delta);\n\n        if (!item) {\n            return;\n        }\n\n        await this.navigateToItem(item, { animationDirection, replace: true });\n    }\n\n    /**\n     * Get item by an offset.\n     *\n     * @param delta Index offset.\n     */\n    protected async getItemBy(delta: number): Promise<Item | null> {\n        const items = this.getSource().getItems();\n        const selectedIndex = (this.selectedItem && items?.indexOf(this.selectedItem)) ?? -1;\n\n        if (selectedIndex === -1 || items === null) {\n            return null;\n        }\n\n        const deltaStep = delta > 0 ? 1 : -1;\n        let nextIndex = selectedIndex;\n        let deltaMoved = 0;\n\n        while (deltaMoved !== delta) {\n            nextIndex += deltaStep;\n\n            if (nextIndex < 0 || nextIndex >= items.length) {\n                break;\n            }\n\n            if (this.skipItemInSwipe(items[nextIndex])) {\n                continue;\n            }\n\n            deltaMoved += deltaStep;\n        }\n\n        if (deltaMoved === delta) {\n            return items[nextIndex];\n        }\n\n        if (!this.getSource().isCompleted()) {\n            await this.getSource().load();\n\n            return this.getItemBy(delta);\n        }\n\n        return null;\n    }\n\n    /**\n     * Check if an item should be skipped during swipe navigation.\n     *\n     * @param item Item.\n     * @returns Whether to skip this item during swipe navigation.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected skipItemInSwipe(item: Item): boolean {\n        return false;\n    }\n\n}\n"],"sourceRoot":"webpack:///"}